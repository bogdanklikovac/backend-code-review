openapi: 3.0.0
info:
  title: Messages API
  version: 1.0.0
paths:
  /messages:
    get:
      summary: Get Messages
      description: Retrieves a list of messages.
      parameters:
        - name: status
          in: query
          description: Filter messages by status
          required: false
          schema:
            type: "string"
            enum:
              - "sent"
              - "read"
            # REVIEW: Restrict the input values to known statuses to prevent unexpected results.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  messages:
                    type: "array"
                    items:
                      type: "object"
                      properties:
                        uuid: 
                          type: "string"
                          description: Unique identifier for the message.
                        text:
                          type: "string"
                          description: The message content.
                        status:
                          type: "string"
                          enum:
                            - "sent"
                            - "read"
                          description: The status of the message, either "sent" or "read".
                # REVIEW: Ensuring the API contract is well-documented by specifying all required fields.
              example:
                messages:
                  - uuid: "1a2b3c"
                    text: "Hello, World!"
                    status: "read"
                  - uuid: "4d5e6f"
                    text: "How are you today?"
                    status: "sent"
                  - uuid: "7g8h9i"
                    text: "Thanks, I'm fine. How about you?"
                # REVIEW: Example response to help API consumers understand the expected structure,
                # ensuring consistency and aiding in testing.

  /messages/send:
    post:
      summary: Send a Message
      description: Sends a new message. The "text" field is required.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            # REVIEW: If you're dealing with more complex data structures or working with APIs, application/json is usually the preferred choice due to its flexibility and efficiency. For straightforward, form-like submissions, application/x-www-form-urlencoded might be more appropriate.
            schema:
              type: "object"
              properties:
                text:
                  type: "string"
                  description: The text content of the message.
              required:
                - text
            # REVIEW: Use of POST for message sending since it modifies server state.
      responses:
        '204':
          description: Successfully sent. No content returned.
        '400':
          description: Bad Request if the "text" field is missing.
      # REVIEW: Switching from GET to POST as it better aligns with HTTP semantics for server-side state changes.